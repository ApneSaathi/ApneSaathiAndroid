apply plugin: applicationPlugin
apply plugin: kotlinPlugin
apply plugin: kotlinAndroidPlugin
apply plugin: kotlinKaptPlugin

def properties = rootProject.file("application.properties") // or file('../application.properties')
def appProperties = new Properties()
appProperties.load(new FileInputStream(properties))

ext {
    devHost = appProperties['dev_host']
    prodHost = appProperties['prod_host']
    databaseName = appProperties['database_name']
    databaseVersion = appProperties['database_version']
    getLoginUser = appProperties['get_login_user']
    verifyPassword = appProperties['verify_password']
    getVolunteers = appProperties['get_volunteers']
    getVolunteerData = appProperties['get_volunteer_data']
    loadDashboard = appProperties['load_dashboard']
    getGrievanceTracking = appProperties['get_grievance_tracking']
    saveSrCitizenFeedbackForm = appProperties['save_sr_citizen_feedback_form']
    registerSrCitizen = appProperties['register_sr_citizen']
    //getSrCitizenDetails = appProperties['get_sr_citizen_details']
    getSeniorCitizensDetails = appProperties['get_senior_citizens_details']
    updateGrievanceDetails = appProperties['update_grievance_details']
    updateProfile = appProperties['update_profile']
    updateVolunteerRatings = appProperties['update_volunteer_ratings']
}

android {
    compileSdkVersion targetVersion
    buildToolsVersion buildVersion

    defaultConfig {
        applicationId appId
        minSdkVersion minVersion
        targetSdkVersion targetVersion
        versionCode appVersionCode
        versionName appVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {

        buildTypes.each { it.buildConfigField "int", "DatabaseVersion", "${databaseVersion}" }
        buildTypes.each { it.buildConfigField "String", "DatabaseName", "${databaseName}" }
        buildTypes.each { it.buildConfigField "String", "GetLoginUser", "${getLoginUser}" }
        buildTypes.each { it.buildConfigField "String", "VerifyPassword", "${verifyPassword}" }
        buildTypes.each { it.buildConfigField "String", "GetVolunteers", "${getVolunteers}" }
        buildTypes.each { it.buildConfigField "String", "GetVolunteerData", "${getVolunteerData}" }
        buildTypes.each { it.buildConfigField "String", "LoadDashboard", "${loadDashboard}" }
        buildTypes.each { it.buildConfigField "String", "GetGrievanceTracking", "${getGrievanceTracking}" }
        buildTypes.each { it.buildConfigField "String", "SaveSrCitizenFeedbackForm", "${saveSrCitizenFeedbackForm}" }
        buildTypes.each { it.buildConfigField "String", "RegisterSrCitizen", "${registerSrCitizen}" }
        //buildTypes.each { it.buildConfigField "String", "GetSrCitizenDetails", "${getSrCitizenDetails}" }
        buildTypes.each { it.buildConfigField "String", "GetSeniorCitizensDetails", "${getSeniorCitizensDetails}" }
        buildTypes.each { it.buildConfigField "String", "UpdateGrievanceDetails", "${updateGrievanceDetails}" }
        buildTypes.each { it.buildConfigField "String", "UpdateProfile", "${updateProfile}" }
        buildTypes.each { it.buildConfigField "String", "UpdateVolunteerRatings", "${updateVolunteerRatings}" }

        release {
            buildTypes.each { it.buildConfigField "String", "ApiHost", "${prodHost}" }
            shrinkResources true
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            buildTypes.each { it.buildConfigField "String", "ApiHost", "${devHost}" }
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    androidExtensions {
        experimental = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def project = "apne_saathi"
            def separator = "_"
            def buildType = variant.buildType.name

            def date = new Date()
            def formattedDate = date.format('dd_MM_yyyy')

            def name = project + separator + formattedDate + ".apk"
            outputFileName = new File(name)
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // Kotlin Support
    implementation kotlinSupport

    // Android UI Support
    implementation constraintLayout
    implementation androidSupport.appCompat
    implementation androidSupport.ktx
    implementation androidSupport.recyclerView
    implementation androidSupport.materialDesign
    implementation androidSupport.cardView
    implementation androidSupport.paging

    // Lifecycle at Runtime for threading
    implementation lifecycleSupport

    // RxJava + RxAndroid
    implementation rxJava2
    implementation rxAndroid2

    // RxBinding for UI
    implementation rxViewBinding

    // Room Database RxRoom
    implementation roomDB.runtime
    kapt roomDB.compiler

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation roomDB.ktx

    // Glide - Image Loader
    implementation glide

    // HTTP Login Interceptor
    implementation okHttpInterceptor

    // Retrofit Api Calling Architecture
    implementation retrofit.networkCall

    // JSON to Response Class converter
    implementation retrofit.gsonConverter
    implementation retrofit.rxJava

    // ViewModel Lifecycle
    implementation viewModelLifecycle

    // Coroutine Scopes
    implementation kotlinCoroutine

    implementation threetenAbp

    //implementation playServicesAuth

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}